const path = require('path');
const fs = require('fs');
const { parse } = require('csv-parse/sync');

function main() {
  const baseDir = path.join(__dirname, '../configs');
  const defaultIndentNum = 1;

  function genIndent(num) {
    return new Array(num).fill('  ');
  }

  function genLine(content, indentNum = defaultIndentNum) {
    return `${genIndent(indentNum)}${content}\n`;
  }

  function convertCSVToJSON(csvInputFileName) {
    const csv = fs.readFileSync(path.join(baseDir, csvInputFileName), 'utf-8');
    const records = parse(csv, {
      bom: true,
      columns: true,
      skip_empty_lines: true,
    });
    // fs.writeFileSync(path.join(baseDir, jsonOutputFileName), JSON.stringify(records, null, 2), 'utf-8');
    return records;
  }

  const achievements = convertCSVToJSON('achievements.csv');
  achievements.forEach((r) => {
    r.level = parseInt(r.level);
    r.hidden = ['true', '1'].includes(r.hidden.toLowerCase());
  });
  const achievementCategories = convertCSVToJSON('achievement-categories.csv');
  const achievementConfig = achievementCategories.map((c) => {
    return {
      ...c,
      achievements: achievements
        .filter((a) => a.categoryKey === c.categoryKey)
        .map((a) => {
          const { categoryKey, ...rest } = a;
          return rest;
        }),
    };
  });
  fs.writeFileSync(
    path.join(baseDir, 'achievement-config.json'),
    JSON.stringify(achievementConfig, null, 2),
    'utf-8',
  );

  const enumOutputContent = `/**
 * This file was automatically generated by \`npm run gen:conf\`.
 * DO NOT MODIFY IT BY HAND.
 */

export enum EAchievementKey {
${achievements.map((a) => genLine(`${a.achievementKey} = '${a.achievementKey}',`)).join('')}}
`;
  fs.writeFileSync(path.join(baseDir, 'achievement.config.ts'), enumOutputContent, 'utf-8');
}

if (process.env.IS_EXEC_FROM_PKG_SCRIPT) {
  main();
}
